using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;


namespace AlienSays
{
    public partial class alienSaysForm : Form
    {

        bool gameInProgress = false; //Changes if there is a game already in progress
        List<int> colourList = new List<int>(); //List to store the current pattern generated by the random generator.
        Random colourGenerator = new Random(); //Random integer generator used to select the next colour in the pattern.
        int currentColour;
        int userGuess;

        public alienSaysForm()
        {
            InitializeComponent();
        }


        private void alienSaysForm_Load(object sender, EventArgs e)
        {
           
        }

        private void redButton_Click(object sender, EventArgs e)
        {

            if (gameInProgress == true)
            {
                userGuess = 0;
                checkCorrect(userGuess, currentColour);
            }
            else
            {
                return;
            }
        }

        private void yellowButton_Click(object sender, EventArgs e)
        {

        }

        private void greenButton_Click(object sender, EventArgs e)
        {

        }

        private void blueButton_Click(object sender, EventArgs e)
        {

        }

        private void runGame()
        {
            gameInProgress = true;
            currentColour = colourGenerator.Next(0, 4); //Generate the next colour in the sequence and set it to the current colour value
            colourList.Add(currentColour); //Add the randomly generated colour to the list of colours stores in the colout list.
            
            for(int i = 0; i<colourList.Count; i++)
            {
                switch (colourList[i])
                {
                    case 0: //Next colour in the sequence is red
                        redButton.BackColor = Color.Red;
                        Thread.Sleep(200);
                        redButton.BackColor = Color.Maroon;
                        Thread.Sleep(200);
                    break;

                    case 1: //Next colour in the sequence is yellow
                        yellowButton.BackColor = Color.Yellow;
                        Thread.Sleep(200);
                        yellowButton.BackColor = Color.DarkGoldenrod;
                        Thread.Sleep(200);
                        break;

                    case 2: //Nxt colour in the sequence is green
                        greenButton.BackColor = Color.Green;
                        Thread.Sleep(200);
                        greenButton.BackColor = Color.DarkGreen;
                        Thread.Sleep(200);
                        break;

                    case 3: //Next colour in the sequence is blue.
                        blueButton.BackColor = Color.Blue;
                        Thread.Sleep(200);
                        blueButton.BackColor = Color.MidnightBlue;
                        Thread.Sleep(200);
                        break;
                }


            }

        }

        private void checkCorrect(int userGuess, int currentColour)
        {
            if(currentColour == userGuess)
            {
                scoreLabel.Text = "Score: " + colourList.Count;
                colourList.Clear();
                currentColour = -1;
                runGame();
            }
            else if (currentColour!= userGuess)
            {
                gameInProgress = false;

            }


        }

        private void startButton_Click(object sender, EventArgs e)
        {
            if (gameInProgress == true)
                return;
            else if(gameInProgress == false)
            {
                runGame();
            }


        }
    }
}